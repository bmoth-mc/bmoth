/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

 plugins {
     id "de.undercouch.download" version "3.2.0"
 }

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'antlr'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

import org.apache.tools.ant.taskdefs.condition.Os

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenCentral()
    maven {
        name "snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name "release"
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
}

sourceSets {
    main {
        java {
          	srcDirs = ['src/main/java', 'build/generated-src']
        }
    }
}

dependencies {
    // Antlr4 Parser Generator
    antlr "org.antlr:antlr4:4.5.3"
    
    // Z3 Java Bindings
    compile files('libs/com.microsoft.z3.jar')

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'de.bmoth.App'


// gradle generateGrammarSource
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
    outputDirectory = file('build/generated-src/de/bmoth/antlr')
}

task downloadZ3 {
    doFirst {
        def url = 'https://github.com/Z3Prover/bin/raw/master/releases/'
        def filename = 'z3-4.5.0-x64-'
        if (Os.isFamily(Os.FAMILY_MAC)) {
            filename += 'osx-10.11.6.zip'
        } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            filename += 'win.zip'
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            filename += 'ubuntu-14.04.zip'
        }
        download {
                src url + filename
                dest 'libs/' + filename
                onlyIfNewer true
                overwrite false
        }
        copy {
            from zipTree('libs/' + filename)
            into 'libs/'
            eachFile { FileCopyDetails fcp ->
                if (fcp.relativePath.pathString.contains("bin")) {
                    fcp.relativePath = new RelativePath(true, *(fcp.relativePath.getSegments()[2..-1]))
                } else {
                    fcp.exclude()
                }
            }
        }
    }
}

compileJava {
    dependsOn {
        downloadZ3
    }
}

tasks.withType(Test) {
    def env_vars =  ['LD_LIBRARY_PATH': ("$System.env.LD_LIBRARY_PATH" + System.getProperty("path.separator") + "$projectDir/libs"),
                     'DYLD_LIBRARY_PATH': ("$System.env.DYLD_LIBRARY_PATH" + System.getProperty("path.separator") + "$projectDir/libs"),
                     'PATH': ("$System.env.PATH" + System.getProperty("path.separator") + "$projectDir/libs")]
    environment env_vars

    systemProperty "java.library.path", "libs"
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

eclipse.classpath.file.whenMerged { classpath ->
    classpath.entries.findResult { entry ->
        if (entry.kind == 'lib' && entry.path.contains('com.microsoft.z3')) {
            entry.setNativeLibraryLocation('bmoth/libs')
        }
    }
}